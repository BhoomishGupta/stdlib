
#:include "common.fypp"
#:set RC_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES
program test_distribution_expon
    use stdlib_kinds, only : sp, dp, xdp, qp
    use stdlib_error, only : check
    use stdlib_random, only : random_seed
    use stdlib_stats_distribution_exponential, only : expon_rvs => rvs_exp,  &
                              expon_pdf => pdf_exp, expon_cdf => cdf_exp

    implicit none
    #:for k1, t1 in REAL_KINDS_TYPES
    ${t1}$, parameter :: ${k1}$tol = 1000 * epsilon(1.0_${k1}$)
    #:endfor
    logical ::  warn = .true.
    integer :: put, get

    put = 12345678
    call random_seed(put, get)


    call test_exponential_random_generator


    #:for k1, t1 in RC_KINDS_TYPES
    call test_expon_rvs_${t1[0]}$${k1}$
    #:endfor


    #:for k1, t1 in RC_KINDS_TYPES
    call test_expon_pdf_${t1[0]}$${k1}$
    #:endfor
    call test_expon_pdf_rsp


    #:for k1, t1 in RC_KINDS_TYPES
    call test_expon_cdf_${t1[0]}$${k1}$
    #:endfor





contains

    subroutine test_exponential_random_generator

        integer, parameter :: num = 10000000, array_size = 1000
        integer :: i, j, freq(0:array_size)
        real(dp) :: chisq, expct

        print *, ""
        print *, "Test exponential random generator with chi-squared"
        freq = 0
        do i = 1, num
            j = 1000 * (1 - exp(- expon_rvs(0.0, 1.0)))
            freq(j) = freq(j) + 1
        end do
        chisq = 0.0_dp
        expct = num / array_size
        do i = 0, array_size - 1
           chisq = chisq + (freq(i) - expct) ** 2 / expct
        end do
        write(*,*) "The critical values for chi-squared with 1000 d. of f. is" &
            //" 1143.92"
        write(*,*) "Chi-squared for exponential random generator is : ", chisq
        call check((chisq < 1143.9), &
            msg="exponential randomness failed chi-squared test", warn=warn)
    end subroutine test_exponential_random_generator



    #:for k1, t1 in RC_KINDS_TYPES
    subroutine test_expon_rvs_${t1[0]}$${k1}$
        ${t1}$ :: res(10), loc, scale
        integer, parameter :: k = 5
        integer :: i
        integer :: seed, get
        #:if t1[0] == "r"
            #! for real type
        ${t1}$, parameter :: ans(10) =                                         &
                            [ 1.37178108290154243675829093263018876_${k1}$,    &
                             0.309467303067628429769087006206973456_${k1}$,    &
                             0.303573393522570872393728791394096334_${k1}$,    &
                              3.00973636550766943109636031294940040_${k1}$,    &
                             0.250084097046766984373533659891108982_${k1}$,    &
                              1.20139122141795795517538181229610927_${k1}$,    &
                              4.43019214257137261547825346497120336_${k1}$,    &
                             0.835001950484080046610557701569632627_${k1}$,    &
                              1.82681711031524329769126779865473509_${k1}$,    &
                             0.910435173630070204708886194566730410_${k1}$]
        #:else
            #! for complex type
        ${t1}$, parameter :: ans(10) =                                         &
                            [(0.640164505354053137153869101894088070_${k1}$,   &
                              0.268204995991944639133208738712710328_${k1}$),  &
                             (0.141667583643866407117073435983911608_${k1}$,   &
                               2.60843818343998017361684560455614716_${k1}$),  &
                             (0.116705911955157926040982374615850854_${k1}$,   &
                               1.04120572522889689448533090398996145_${k1}$),  &
                              (2.06742299986664055388985161698656149_${k1}$,   &
                              0.723668357086202707062483341360348315_${k1}$),  &
                             (0.852514651480446872255924972705542983_${k1}$,   &
                              0.789043817146060844081034701957833041_${k1}$),  &
                              (1.09098446025458177821576555288629603_${k1}$,   &
                               1.48569478096399141264782883808948111_${k1}$),  &
                              (4.29633077423243321391055360436439499_${k1}$,   &
                              0.338216396454583145825267820328008412_${k1}$),  &
                             (0.340462754402863337910289942556119029_${k1}$,   &
                              0.172319442815022222381671213042864120_${k1}$),  &
                       (6.932352666201882229746189523211795805E-0002_${k1}$,   &
                        6.742518436285274002761624956292507704E-0002_${k1}$),  &
                              (1.03231628501970258415809666985296648_${k1}$,   &
                              0.421413014732743429480166241773986277_${k1}$)]
        #:endif

        print *, "Test exponential_distribution_rvs_${t1[0]}$${k1}$"
        seed = 593742186
        call random_seed(seed, get)

        #:if t1[0] == "r"
            #! for real type
        loc   = 0.0_${k1}$
        scale = 1.5_${k1}$
        #:else
            #! for complex type
        loc   = (0.0_${k1}$, 0.0_${k1}$)
        scale = (0.7_${k1}$, 1.3_${k1}$)
        #:endif

        do i = 1, k
            res(i) = expon_rvs(loc, scale)      ! 1 dummy
        end do
        res(6:10) = expon_rvs(loc, scale, k)    ! 2 dummies
        call check(all(abs(res - ans) < ${k1}$tol),                            &
            msg="exponential_distribution_rvs_${t1[0]}$${k1}$ failed", warn=warn)
    end subroutine test_expon_rvs_${t1[0]}$${k1}$

    #:endfor




    #:for k1, t1 in RC_KINDS_TYPES
    subroutine test_expon_pdf_${t1[0]}$${k1}$

        ${t1}$ :: x1, x2(3,4), loc, scale
        integer :: seed, get
        real(${k1}$) :: res(3,5)
        #:if t1[0] == "r"
            #! for real type
        real(${k1}$), parameter :: ans(15) =                                   &
                             [0.161196572913168763707695024965242901_${k1}$,   &
                              0.161196572913168763707695024965242901_${k1}$,   &
                              0.161196572913168763707695024965242901_${k1}$,   &
                              0.643898188440827210152396844674246781_${k1}$,   &
                              0.483874493503456231093693975081491447_${k1}$,   &
                         9.03370704401507616746076779036425611E-0002_${k1}$,   &
                              0.324446322474929270783681833006314743_${k1}$,   &
                              0.105508812337994867337369061259176307_${k1}$,   &
                              0.134103192260524265823113451239842656_${k1}$,   &
                              0.600352329443164063355621930673196730_${k1}$,   &
                              0.185145886685884149909301423404484569_${k1}$,   &
                              0.640174124005934997256906214340904849_${k1}$,   &
                         8.71310352316870081179003238592937984E-0002_${k1}$,   &
                              0.120610589741161627237827724075984870_${k1}$,   &
                              0.444928832931631578265476475258011855_${k1}$]
        #:else
            #! for complex type
        real(${k1}$), parameter :: ans(15) =                                   &
                             [0.486535224757776955373552792251950892_${k1}$,   &
                              0.486535224757776955373552792251950892_${k1}$,   &
                              0.486535224757776955373552792251950892_${k1}$,   &
                              0.204899082205378114034570971362956231_${k1}$,   &
                              0.160462247586374432191047938164570635_${k1}$,   &
                              0.377386705590797968776822125514642235_${k1}$,   &
                              0.555588777292678074202874575318307322_${k1}$,   &
                         4.92605884877423501624127196918217120E-0002_${k1}$,   &
                               1.27717230149361435509455319481070053_${k1}$,   &
                              0.202330648081272095897577464423159785_${k1}$,   &
                              0.123454294230420925843509908198290816_${k1}$,   &
                              0.702514356837609534474727020137414207_${k1}$,   &
                              0.183552428976738966628798837688943286_${k1}$,   &
                              0.764400963035895183003646698336710458_${k1}$,   &
                              0.465938985248816058528756692077795393_${k1}$]
        #:endif

        print *, "Test exponential_distribution_pdf_${t1[0]}$${k1}$"
        seed = 123987654
        call random_seed(seed, get)
        #:if t1[0] == "r"
            #! for real type
        loc   = 0.0_${k1}$
        scale = 1.5_${k1}$
        #:else
            #! for complex type
        loc   = (0.0_${k1}$, 0.0_${k1}$)
        scale = (0.3_${k1}$, 1.6_${k1}$)
        #:endif

        x1 = expon_rvs(loc, scale)
        x2 = reshape(expon_rvs(loc, scale, 12), [3,4])
        res(:,1) = expon_pdf(x1, loc, scale)
        res(:, 2:5) = expon_pdf(x2, loc, scale)
        call check(all(abs(res - reshape(ans, [3,5])) < ${k1}$tol),            &
            msg="exponential_distribution_pdf_${t1[0]}$${k1}$ failed", warn=warn)
    end subroutine test_expon_pdf_${t1[0]}$${k1}$

    #:endfor




    #:for k1, t1 in RC_KINDS_TYPES
    subroutine test_expon_cdf_${t1[0]}$${k1}$

        ${t1}$ :: x1, x2(3,4), loc, scale
        integer :: seed, get
        real(${k1}$) :: res(3,5)
        #:if t1[0] == "r"
            #! for real type
        real(${k1}$), parameter :: ans(15) =                                   &
                           [0.109257742653704886153815776449785051_${k1}$,     &
                            0.109257742653704886153815776449785051_${k1}$,     &
                            0.109257742653704886153815776449785051_${k1}$,     &
                            0.717506371795765265795319089684216215_${k1}$,     &
                       6.82471795435370961628021592837348251E-0002_${k1}$,     &
                            0.158022297254037860379992220663140220_${k1}$,     &
                            0.914579543576380160727189390750289231_${k1}$,     &
                            0.735445094339121647068624074363021598_${k1}$,     &
                       8.69845458684957375690771394578441361E-0002_${k1}$,     &
                            0.491195342629961409581199224477971938_${k1}$,     &
                            0.574283568793105916250099261345264380_${k1}$,     &
                            0.312823040527767907760475800138803955_${k1}$,     &
                            0.640029783598040153827956625977856239_${k1}$,     &
                       2.16202116731629451897815202649346917E-0002_${k1}$,     &
                       7.74788145547936974757767867581111655E-0002_${k1}$]
        #:else
        real(${k1}$), parameter :: ans(15) =                                   &
                        [7.83931265220552191922145459533155073E-0002_${k1}$,   &
                         7.83931265220552191922145459533155073E-0002_${k1}$,   &
                         7.83931265220552191922145459533155073E-0002_${k1}$,   &
                         1.07845760925785109085652212151328215E-0002_${k1}$,   &
                              0.672623038706161724678635394849362256_${k1}$,   &
                         4.27264038113873579678831482902258168E-0002_${k1}$,   &
                              0.179649132114996961326498233168917293_${k1}$,   &
                         1.38375793985183014482681114776428612E-0002_${k1}$,   &
                         3.49246365297941076158369468479748612E-0002_${k1}$,   &
                              0.116869945417176368845403154176734792_${k1}$,   &
                              0.468462732010133566674397830557697485_${k1}$,   &
                              0.413506985517976634907329948218002431_${k1}$,   &
                              0.665679674838121942273909342901808398_${k1}$,   &
                              0.223748595107983772617787558595393205_${k1}$,   &
                              0.337722969540396286456937689606849800_${k1}$]
        #:endif

        print *, "Test exponential_distribution_cdf_${t1[0]}$${k1}$"
        seed = 621957438
        call random_seed(seed, get)

        #:if t1[0] == "r"
            #! for real type
        loc   = 0.0_${k1}$
        scale = 2.0_${k1}$
        #:else
        loc   = (0.0_${k1}$, 0.0_${k1}$)
        scale = (1.3_${k1}$, 2.1_${k1}$)
        #:endif

        x1 = expon_rvs(loc, scale)
        x2 = reshape(expon_rvs(loc, scale, 12), [3,4])
        res(:,1) = expon_cdf(x1, loc, scale)
        res(:, 2:5) = expon_cdf(x2, loc, scale)
        call check(all(abs(res - reshape(ans,[3,5])) < ${k1}$tol),             &
            msg="exponential_distribution_cdf_${t1[0]}$${k1}$ failed", warn=warn)
    end subroutine test_expon_cdf_${t1[0]}$${k1}$

    #:endfor

end program test_distribution_expon
